<=== 420XD69 ===> This is an example boulder program which shows you examples of current standard
<=== 420XD69 ===> library support.

<=== 420XD69 ===> Lines beginning with <=== 420XD69 ===> are comments and will not be processed
<=== 420XD69 ===> The bouldering program language uses common terms from bouldering
<=== 420XD69 ===> Syntax is similar to python and functionality is also similar to python
<=== 420XD69 ===> as python powers .boulder under the hood!
<=== 420XD69 ===> You can specify the parameter type by adding a single letter after the last
<=== 420XD69 ===> parentheses of the function call (i.e., i for int, s for string, f for float)
<=== 420XD69 ===> Not specifying a type will use string for params by default.

<=== 420XD69 ===> NOTE: Currently, typing params is unsupported in v0.1.0 when using with nested
<=== 420XD69 ===> functions, please only use param typing with singular function calls for now.

<=== 420XD69 ===> fullSend() prints the input in capital letters
<=== 420XD69 ===>fullSend("my name is Marc")

<=== 420XD69 ===> send() prints the input
<=== 420XD69 ===>send("my name is Marc. This is the bouldering programming language!")s

<=== 420XD69 ===> crux() returns the length of the input
<=== 420XD69 ===>crux("my name is Marc")

<=== 420XD69 ===> flash() converts the input to a string
<=== 420XD69 ===>flash(123)i

<=== 420XD69 ===> block() converts the input to an integer
<=== 420XD69 ===>block("1")f

<=== 420XD69 ===> slab() converts the input to a float
<=== 420XD69 ===>slab(10.5)s

<=== 420XD69 ===> jug() returns the maximum element from a list
<=== 420XD69 ===>jug([1,2,3])f

<=== 420XD69 ===> pivot() returns the minimum element from a list
<=== 420XD69 ===>pivot([1,2,3])s

<=== 420XD69 ===> heelHook() returns a sorted version of the list passed in as input
<=== 420XD69 ===>heelHook([1,5,2,6,3,3,4,8])f

<=== 420XD69 ===> toeHook() returns the type of the input parameter
<=== 420XD69 ===>toeHook("string")

<=== 420XD69 ===> choss() takes no parameters and reports on the sketchiness of a rock
<=== 420XD69 ===>choss()

<=== 420XD69 ===> makeRoute() takes a parameter for the height of the animation, default value of 22
<=== 420XD69 ===>makeRoute(20)s

<=== 420XD69 ===> The below chained functions work as expected, however, typing parameters is not yet supported
<=== 420XD69 ===> for chained function calls
<=== 420XD69 ===>send(slab(flash(10.0)))

<=== 420XD69 ===> The below nested function call should result in a print statement of
<=== 420XD69 ===> jug([1,2,3])f = 3.0, flash(3.0) = "3.0", send("3.0") should print 3.0 as
<=== 420XD69 ===> a string
<=== 420XD69 ===>send(flash(jug([1,2,3])f))

<=== 420XD69 ===> Let's do this function ting bois, what do we want to be our definer?
<=== 420XD69 ===> Hold: any part of the rock that can be used to ascend a problem. I like
<=== 420XD69 ===> that a lot actually, that makes sense to me. Let's make it caps though hehe.
<=== 420XD69 ===> And to support multiline function code let's use a cheeky SLOPER
HOLD sendAndFullSend(value1) => fullSend(value1) SLOPER send(value1)

<=== 420XD69 ===> Let's call our function...
<=== 420XD69 ===>sendAndFullSend("YEssIr")

HOLD sendAsFloatAndInt(value1) => send(value1)f SLOPER send(value1)i

sendAsFloatAndInt(5)